var documenterSearchIndex = {"docs":
[{"location":"#DynLoco-Documentation","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"","category":"section"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"DynLoco is a Julia package for simulating and optimizing simple dynamic locomotion models. The package includes a set of structs that describe models, functions to manipulate models, and optimization routines to perform dynamic optimization on them. The optimization is based on JuMP.jl.","category":"page"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"There is presently one main locomotion model, WalkRW2l.","category":"page"},{"location":"#Getting-started","page":"DynLoco Documentation","title":"Getting started","text":"","category":"section"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"The following demonstrates the generation of a simple walking model, continous-time simulation of a single step, and then simulation of multiple discrete steps. ","category":"page"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"using DynLoco, Plots\nw = WalkRW2l() # a default walking model\n(t, theta, angvel) = simulatestep(w)\nplot(t, theta, xlabel=\"time\", ylabel=\"theta\")\nnsteps = multistep(w, Ps = fill(w.P, (10,1)))\nplotvees(nsteps, xlabel=\"step #\", ylabel=\"speed\")","category":"page"},{"location":"#Initiating-a-model","page":"DynLoco Documentation","title":"Initiating a model","text":"","category":"section"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"A locomotion model is represented by a DynLoco struct that contains the model parameters. The model can then be simulated and optimized.","category":"page"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"using DynLoco\nw = WalkRW2l()   # a default walking model\nislimitcycle(w)  # == true (default is a limit cycle)\nonestep(w).speed # about 0.4 dimensionless speed","category":"page"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"WalkRW2l\nonestep\nsimulatestep","category":"page"},{"location":"#DynLoco.WalkRW2l","page":"DynLoco Documentation","title":"DynLoco.WalkRW2l","text":"w = WalkRW2l(vm, P, α, γ, L, M, g, parms, limitcycle)\n\nRimless wheel in 2D, linearized. Struct containing model parameters. Parameter values can be overridden with WalkRW2l(w, α=0.35) which produces a new model like w except with a new value for alpha. Similarly any parameter may be replaced using named keyword arguments. State: mid-stance speed vm. Control: Push-off impulse P.\n\nparms is a list of numerical model parameters. limitcycle is a named tuple with f, a function whose root is a fixed point. safety (logical) prevents model from falling backwards, rather it always moves forward, albeit very slowly if given insufficient forward speed.\n\nThe default object is a limit cycle with speed of 0.4.\n\n\n\n\n\n","category":"type"},{"location":"#DynLoco.onestep","page":"DynLoco Documentation","title":"DynLoco.onestep","text":"onestep(walk [,parameters, safety])\n\nTake one step with a walk struct, from mid-stance to mid-stance. Parameter values can be supplied to override the existing field values. Notably, includes vm, P, δangle. Output is a NamedTuple of outcomes such as vm (at end), tf (final time), work, speed, steplength, etc. Set safety=true to prevent step from blowing up if stance leg has too little momentum to reach middle stance. A step will be returned with very long step time, and very slow mid-stance velocity.\n\n\n\n\n\n","category":"function"},{"location":"#DynLoco.simulatestep","page":"DynLoco Documentation","title":"DynLoco.simulatestep","text":"simulatestep(walk [,parameters, safety])\n\nSimulate one step with a walk struct, from mid-stance to mid-stance, and return the continuous-time time t plus states θ and Ω. Continuous- time states are useful for plotting. Here they include a doubled time point for the step-to-step transition, for the states immediately before and after.\n\nParameter values can be supplied to override the existing field values.  Notably, includes vm, P, δangle. Output is arrays (t, θ, Ω). See onestep to get just the discrete mid-stance states.\n\n\n\n\n\n","category":"function"},{"location":"#Finding-gaits","page":"DynLoco Documentation","title":"Finding gaits","text":"","category":"section"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"findgait","category":"page"},{"location":"#DynLoco.findgait","page":"DynLoco Documentation","title":"DynLoco.findgait","text":"wnew = findgait(walk [,target=target] [,varying=varying] [,parameters])\n\nFind a limit cycle for a walk struct, using optional new parameters specified. Optional target is a desired output in symbol form accompanied by associated varying parameter, with 1-to-1 target and varying. Returns a new walk struct that satisfies limit cycle and desired target.\n\nExamples\n\n    findgait(walk, target=(:speed=>0.4), varying=(:P), P=0.15)\n\nFinds a limit cycle with walk starting at P=0.15, but varying P to yield a desired speed of 0.4.\n\nNote that target and varying may be singletons of tuples, with each referring to a parameter symbol. Other parameters are set as equalities.\n\n\n\n\n\n","category":"function"},{"location":"#Optimizing-a-model","page":"DynLoco Documentation","title":"Optimizing a model","text":"","category":"section"},{"location":"","page":"DynLoco Documentation","title":"DynLoco Documentation","text":"optwalk\noptwalktime","category":"page"},{"location":"#DynLoco.optwalk","page":"DynLoco Documentation","title":"DynLoco.optwalk","text":"optwalk(w::Walk, numsteps=5)\n\nOptimizes push-offs to walk numsteps steps. Returns a MultiStepResults struct. Allows slopes to be specified as keyword δs array of the slope of each successive step.\n\nOther keyword arguments: boundaryvels = (vm,vm) can specify a tuple of initial and final speeds, default nominal middle-stance speed vm. To start and end at rest, use (0,0). boundarywork = true whether cost includes the work needed to start and end from boundaryvels. totaltime is the total time to take the steps, by default the same time expected of the nominal w on level ground.\n\nSee also optwalktime.\n\n\n\n\n\n","category":"function"},{"location":"#DynLoco.optwalktime","page":"DynLoco Documentation","title":"DynLoco.optwalktime","text":"optwalktime(w::WalkrW2l, numsteps=5)\n\nOptimizes push-offs to walk numsteps steps in minimum work and time. Returns a MultiStepResults struct. Optional keyword arguments: δ array of slopes for uneven terrain. ctime is the relative cost of time in units of work/time.\n\nOther keywords: boundaryvels = (vm,vm) can specify a tuple of initial and final speeds, default nominal middle-stance speed vm. To start and end at rest, use (0,0). boundarywork = true whether cost includes the work needed to start and end from boundaryvels. symmetric = false whether to enforce fore-aft symmetry in the slope profile. totaltime is the total time to take the steps, by default the same time expected of the nominal w on level ground. startv initial guess at speeds.\n\nSee also optwalk.\n\n\n\n\n\n","category":"function"}]
}
